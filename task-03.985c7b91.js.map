{"version":3,"sources":["js/task-03.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"AAAA;AAEA,MAAMA,yBAAyB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFD;;AAIA,MAAMK,eAAe,GAAGC,WAAW,IAAI;AACrC,QAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AAEA,SAAO,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAIQ,UAAJ,EAAgB;AACdH,QAAAA,OAAO,CAAC,CAACH,WAAW,CAACO,EAAb,EAAiBN,KAAjB,CAAD,CAAP;AACD,OAFD,MAEO;AACLG,QAAAA,MAAM,CAACJ,WAAW,CAACO,EAAb,CAAN;AACD;AACF,KARS,EAQPN,KARO,CAAV;AASD,GAVM,CAAP;AAWD,CAdD;;AAgBA,MAAMO,UAAU,GAAGD,EAAE,IAAI;AACvBE,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcH,EAAE,CAAC,CAAD,CAAI,iBAAgBA,EAAE,CAAC,CAAD,CAAI,IAAvD;AACD,CAFD;;AAIA,MAAMI,QAAQ,GAAGJ,EAAE,IAAI;AACrBE,EAAAA,OAAO,CAACG,IAAR,CAAc,gCAA+BL,EAAG,2BAAhD;AACD,CAFD;;AAIAR,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE;AAEAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE;AAEAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAwCC,IAAxC,CAA6CN,UAA7C,EAAyDO,KAAzD,CAA+DJ,QAA/D;AAEAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE","file":"task-03.985c7b91.js","sourceRoot":"..\\src","sourcesContent":["// ## Задание 3 >>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = id => {\r\n  console.log(`Transaction ${id[0]} processed in ${id[1]}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"]}